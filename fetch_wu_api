#!/usr/bin/env python
""" Fetch a forecast from the Weather Underground API. """

import pandas as pd
from pandas.io.json import json_normalize
import requests

FEATURE_MAP = {
    # Map data feature URL bit to JSON info
    'conditions': "current_observation",
    'hourly': "hourly_forecast",
}
FEATURE_CHOICES = sorted(list(FEATURE_MAP.keys()))

WU_URL = "http://api.wunderground.com/api/{key:s}/geolookup/{feature:s}/q/{state:s}/{city:s}.json"

from argparse import ArgumentParser, RawDescriptionHelpFormatter
parser = ArgumentParser(description=__doc__,
                        formatter_class=RawDescriptionHelpFormatter)
parser.add_argument("api_key", type=str, metavar="<API key>",
                    help="API key provided by Weather Underground")
parser.add_argument("feature", type=str, choices=FEATURE_CHOICES,
                    help="Data feature to request")
parser.add_argument("city", type=str,
                    help="City to query.")
parser.add_argument("state", type=str,
                    help="State of city to query.")
parser.add_argument("out_fn", type=str, metavar="<out.json>",
                    help="Name of output file to save.")


if __name__ == "__main__":

    args = parser.parse_args()
    print(args)
    fetch_url = WU_URL.format(key=args.api_key, state=args.state, city=args.city,
                              feature=args.feature)
    r = requests.get(fetch_url)
    # Catch any issues
    r.raise_for_status()

    # Process JSON
    data = r.json()
    feature_data = data[FEATURE_MAP[args.feature]]
    feature_data = json_normalize(feature_data)

    print(feature_data)

    feature_data.to_json(args.out_fn)
